


#Output should be each row - accession, host field, lab host field and accessions are from the working set we made while working on  complex host name sheet 



#need the accession numbers

#pip install biopython




#setting up bio python 
from Bio import Entrez, SeqIO
import csv

def fetch_genbank_record(accession_number):
    Entrez.email = "bvbrcacapria@gmail.com"
    try:
        handle = Entrez.efetch(db="nuccore", id=accession_number, rettype="gb", retmode="text")
        record = SeqIO.read(handle, "genbank")
        handle.close()
        return record
    except Exception as e:
        print(f"Error fetching GenBank record: {e}")
        return None



def extract_host_info(record):
    host_info = ""
    lab_host_info = ""
    for feature in record.features:
        if feature.type == "source":
            qualifiers = feature.qualifiers
            if "host" in qualifiers:
                host_info = ', '.join(qualifiers["host"])
            if "lab_host" in qualifiers:
                lab_host_info = ', '.join(qualifiers["lab_host"])
    return host_info, lab_host_info

def main():
    accession_numbers = [
     "MH177014", "MN450761", "MN450762", "MN450763", "MH049431", "OL504742", "OL504743", 
        "OL504741", "KR028365", "KR028366", "KR028367", "KR028368", "KR028369", "KR028370", 
        "S79186", "OK274284", "OK274285", "OK274286", "OK274287", "OK274288", "OK274289", 
        "OK274291", "OK274290", "M13795", "KY398733", "KY398740", "AH002793", "M24205", 
        "AF551845", "AF551847", "EF645136", "KY849701", "KY849702", "KY849703", "KY849704", 
        "KY849705", "KY849706", "KY849707", "KY849708", "KY849709", "KY849710", "KY849711", 
        "KY849712", "KY849713", "KY849714", "KY849715", "KY849716", "KY849717", "KY849718", 
        "KY849719", "KY849720", "KY849721", "KY849722", "KY849723", "KY849724", "KY849725", 
        "KY849726", "KY849727", "KY849728", "KY849729", "KY849730", "KY849731", "KY849732", 
        "KY849733", "KY849734", "KY849735", "KY849736", "KY849737", "KY849738", "KY849739", 
        "KY849740", "KY849741", "KY849742", "KY849743", "KY849744", "KY849745", "KY849746", 
        "KY849747", "KY849748", "KY849749", "KY849750", "KY849751", "KY849752", "KY849753", 
        "KY849754", "KY849755", "KY849756", "KY849757", "KY849758", "KY849759", "KY849760", 
        "KY849761", "KY849762", "HQ620296", "HQ620297", "KX545421", "KF914669", "HQ395675", 
        "HQ395676", "HQ395683", "HQ596506", "HQ596516", "HQ596507", "HQ668020", "DQ263696", 
        "DQ263695", "DQ263697", "JQ341188", "JQ341189", "JQ341190", "MH719217", "MH523642", 
        "KC017951", "KC018037", "MG765427", "MG765426", "KX690530", "MN563088", "MN718829", 
        "MN718830", "MN718831", "MH426702", "MT732486", "MT732487", "MT732484", "MT732485", 
        "MT732488", "MT732490", "MT732491", "MT732489", "MH509394", "MH509393", "KF985175", 
        "JQ687377", "KC984305", "JX183260", "JX183268", "JX183275", "KX555601", "KX555602", 
        "MH631015", "MH631016", "KJ410048", "KM099432", "KT187552", "KR259656", "MH615810", 
        "CP099892", "CP099893", "CP099894", "CP099890", "CP099891", "CP099898", "CP099899", 
        "CP099900", "CP099901", "CP099902", "CP099910", "CP099911", "CP099895", "CP099896", 
        "CP099897", "KX771232", "MW013954", "EF545564", "EF545565", "OM858819", "ON075498", 
        "ON075499", "ON077631", "ON077632", "OM858820", "MW856793", "MW856794", "MZ433432", 
        "MT370517", "MT374107", "MT374115", "MT374116", "MT274668", "MT274669", "KU893863", 
        "KU893868", "KU893869", "MG999576", "MG999577", "MG999578", "MG999579", "MG999580", 
        "MG999581", "MG999582", "MG999583", "MG999584", "MG999585", "MN075149", "MN075150", 
        "KC859950", "KC859952", "KC859951", "MN723881", "MN723880", "MN723882", "MN723883", 
        "MN723884", "MN723885", "MN723886", "MN723887", "MN723888", "MN723889", "KJ746846", 
        "KJ746847", "KJ746854", "KJ746855", "KJ746858", "KJ746859", "KJ746860", "KJ746861", 
        "KF303100", "MT043279", "KP861859", "JX443620", "JX443622", "KC794529", "MH025971", 
        "MH025972", "MH025973", "MH108964", "MH108966", "KF032240", "KF149867", "KR091562", 
        "KF214764", "KX266912", "KX266913", "KX266915", "KF254761", "KF254763", "KR091564", 
        "KF280870", "KF280871", "KF280869", "KF311075", "KF311077", "KF311076", "KF359956", 
        "KF410620", "KF468719", "KF530028", "KX838946", "KF922360", "MH667273", "MH667288", 
        "MH667304", "KT001487", "KT001486", "KT001485", "KT001490", "KT001488", "KT001493", 
        "MK348888", "MK348896", "MK348897", "MK348901", "MK348898", "KJ888424", "KJ888425", 
        "KT161320", "KT161328", "KM099431", "KM099435", "KM099436", "KT161327", "KM283223", 
        "KR091554", "KR493426", "KP202689", "KP297806", "KP329571", "KP677286", "KR493425", 
        "KP704590", "KP704588", "KP704591", "KP704592", "KP728904", "KP728906", "KP728905", 
        "KP728903", "KP728907", "KP728910", "KP728913", "KP790246", "KP790248", "KP790247", 
        "KP938189", "KP938194", "KP938198", "KP938199", "KP938200", "JX051516", "KR493427", 
        "JX051517", "JX183261", "KR493428", "JX183263", "JX183262", "JX183269", "JX183267", 
        "JX183274", "KT428797", "KT428800", "KT428798", "KT428799", "KT428802", "KT428801", 
        "KT428803", "JX219961", "KR091555", "JX219965", "KR493429", "JX219960", "JX486009", 
        "JX631247", "MF449467", "KR091556", "KT818817", "KT818818", "KT818820", "KT818819", 
        "KT818825", "KT818824", "KT818826", "KT818827", "KT818828", "KR091558", "KU053773", 
        "KU053778", "KU053779", "KU053780", "KU053782", "KU053785", "KU053783", "KU053787", 
        "KU053789", "KU053791", "KU053793", "KU053794", "KU053792", "KU176117", "KU176124", 
        "KC139050", "KC139051", "KR091560", "KC708873", "KU746840", "KJ136549", "KJ136548", 
        "KJ136550", "KJ136551", "KJ136552", "KJ136553", "KJ136554", "KJ136557", "KJ136556", 
        "KJ136555", "KJ136558", "KJ136559", "KJ136560", "KJ136561", "JX183265", "JX266446", 
        "KJ755977", "KJ755979", "KJ755980", "KJ755981", "KJ755978", "KJ755982", "JX486006", 
        "JX857303", "JX857304"
    ]
    with open("genbank_records_HOST_and_Lab_host.csv", "w", newline='') as csvfile:
        csv_writer = csv.writer(csvfile)
        # Write header
        csv_writer.writerow(["Accession", "Host", "Lab Host"])
        for accession_number in accession_numbers:
            record = fetch_genbank_record(accession_number)
            if record:
                accession = record.id
                # Extract host and lab host information
                host_info, lab_host_info = extract_host_info(record)
                # Write data to CSV
                csv_writer.writerow([accession, host_info, lab_host_info])

if __name__ == "__main__":
    main()





`------------------------------``------------------------------``------------------------------``------------------------------``------------------------------``------------------------------``------------------------------``------------------------------`

#explanations here on out
`------------------------------``------------------------------``------------------------------``------------------------------``------------------------------``------------------------------``------------------------------``------------------------------`

#setting up bio python 
from Bio import Entrez, SeqIO
import csv

#getting the genbank records
def fetch_genbank_record(accession_number):
    Entrez.email = "bvbrcacapria@gmail.com"
    try:
        handle = Entrez.efetch(db="nuccore", id=accession_number, rettype="gb", retmode="text")
        record = SeqIO.read(handle, "genbank")
        handle.close()
        return record
    except Exception as e:
        print(f"Error fetching GenBank record: {e}")
        return None


#how I am getting the lab host and host info from the records, making sure it's pulling out the right thing 
def extract_host_info(record):
    host_info = ""
    lab_host_info = ""
    for feature in record.features:
        if feature.type == "source":
            qualifiers = feature.qualifiers
            if "host" in qualifiers:
                host_info = ', '.join(qualifiers["host"])
            if "lab_host" in qualifiers:
                lab_host_info = ', '.join(qualifiers["lab_host"])
    return host_info, lab_host_info

#the main code
def main():
    #all of the accession numbers I got from the BV-BRC
    accession_numbers = [
     "MH177014", "MN450761", "MN450762", "MN450763", "MH049431", "OL504742", "OL504743", 
        "OL504741", "KR028365", "KR028366", "KR028367", "KR028368", "KR028369", "KR028370", 
        "S79186", "OK274284", "OK274285", "OK274286", "OK274287", "OK274288", "OK274289", 
        "OK274291", "OK274290", "M13795", "KY398733", "KY398740", "AH002793", "M24205", 
        "AF551845", "AF551847", "EF645136", "KY849701", "KY849702", "KY849703", "KY849704", 
        "KY849705", "KY849706", "KY849707", "KY849708", "KY849709", "KY849710", "KY849711", 
        "KY849712", "KY849713", "KY849714", "KY849715", "KY849716", "KY849717", "KY849718", 
        "KY849719", "KY849720", "KY849721", "KY849722", "KY849723", "KY849724", "KY849725", 
        "KY849726", "KY849727", "KY849728", "KY849729", "KY849730", "KY849731", "KY849732", 
        "KY849733", "KY849734", "KY849735", "KY849736", "KY849737", "KY849738", "KY849739", 
        "KY849740", "KY849741", "KY849742", "KY849743", "KY849744", "KY849745", "KY849746", 
        "KY849747", "KY849748", "KY849749", "KY849750", "KY849751", "KY849752", "KY849753", 
        "KY849754", "KY849755", "KY849756", "KY849757", "KY849758", "KY849759", "KY849760", 
        "KY849761", "KY849762", "HQ620296", "HQ620297", "KX545421", "KF914669", "HQ395675", 
        "HQ395676", "HQ395683", "HQ596506", "HQ596516", "HQ596507", "HQ668020", "DQ263696", 
        "DQ263695", "DQ263697", "JQ341188", "JQ341189", "JQ341190", "MH719217", "MH523642", 
        "KC017951", "KC018037", "MG765427", "MG765426", "KX690530", "MN563088", "MN718829", 
        "MN718830", "MN718831", "MH426702", "MT732486", "MT732487", "MT732484", "MT732485", 
        "MT732488", "MT732490", "MT732491", "MT732489", "MH509394", "MH509393", "KF985175", 
        "JQ687377", "KC984305", "JX183260", "JX183268", "JX183275", "KX555601", "KX555602", 
        "MH631015", "MH631016", "KJ410048", "KM099432", "KT187552", "KR259656", "MH615810", 
        "CP099892", "CP099893", "CP099894", "CP099890", "CP099891", "CP099898", "CP099899", 
        "CP099900", "CP099901", "CP099902", "CP099910", "CP099911", "CP099895", "CP099896", 
        "CP099897", "KX771232", "MW013954", "EF545564", "EF545565", "OM858819", "ON075498", 
        "ON075499", "ON077631", "ON077632", "OM858820", "MW856793", "MW856794", "MZ433432", 
        "MT370517", "MT374107", "MT374115", "MT374116", "MT274668", "MT274669", "KU893863", 
        "KU893868", "KU893869", "MG999576", "MG999577", "MG999578", "MG999579", "MG999580", 
        "MG999581", "MG999582", "MG999583", "MG999584", "MG999585", "MN075149", "MN075150", 
        "KC859950", "KC859952", "KC859951", "MN723881", "MN723880", "MN723882", "MN723883", 
        "MN723884", "MN723885", "MN723886", "MN723887", "MN723888", "MN723889", "KJ746846", 
        "KJ746847", "KJ746854", "KJ746855", "KJ746858", "KJ746859", "KJ746860", "KJ746861", 
        "KF303100", "MT043279", "KP861859", "JX443620", "JX443622", "KC794529", "MH025971", 
        "MH025972", "MH025973", "MH108964", "MH108966", "KF032240", "KF149867", "KR091562", 
        "KF214764", "KX266912", "KX266913", "KX266915", "KF254761", "KF254763", "KR091564", 
        "KF280870", "KF280871", "KF280869", "KF311075", "KF311077", "KF311076", "KF359956", 
        "KF410620", "KF468719", "KF530028", "KX838946", "KF922360", "MH667273", "MH667288", 
        "MH667304", "KT001487", "KT001486", "KT001485", "KT001490", "KT001488", "KT001493", 
        "MK348888", "MK348896", "MK348897", "MK348901", "MK348898", "KJ888424", "KJ888425", 
        "KT161320", "KT161328", "KM099431", "KM099435", "KM099436", "KT161327", "KM283223", 
        "KR091554", "KR493426", "KP202689", "KP297806", "KP329571", "KP677286", "KR493425", 
        "KP704590", "KP704588", "KP704591", "KP704592", "KP728904", "KP728906", "KP728905", 
        "KP728903", "KP728907", "KP728910", "KP728913", "KP790246", "KP790248", "KP790247", 
        "KP938189", "KP938194", "KP938198", "KP938199", "KP938200", "JX051516", "KR493427", 
        "JX051517", "JX183261", "KR493428", "JX183263", "JX183262", "JX183269", "JX183267", 
        "JX183274", "KT428797", "KT428800", "KT428798", "KT428799", "KT428802", "KT428801", 
        "KT428803", "JX219961", "KR091555", "JX219965", "KR493429", "JX219960", "JX486009", 
        "JX631247", "MF449467", "KR091556", "KT818817", "KT818818", "KT818820", "KT818819", 
        "KT818825", "KT818824", "KT818826", "KT818827", "KT818828", "KR091558", "KU053773", 
        "KU053778", "KU053779", "KU053780", "KU053782", "KU053785", "KU053783", "KU053787", 
        "KU053789", "KU053791", "KU053793", "KU053794", "KU053792", "KU176117", "KU176124", 
        "KC139050", "KC139051", "KR091560", "KC708873", "KU746840", "KJ136549", "KJ136548", 
        "KJ136550", "KJ136551", "KJ136552", "KJ136553", "KJ136554", "KJ136557", "KJ136556", 
        "KJ136555", "KJ136558", "KJ136559", "KJ136560", "KJ136561", "JX183265", "JX266446", 
        "KJ755977", "KJ755979", "KJ755980", "KJ755981", "KJ755978", "KJ755982", "JX486006", 
        "JX857303", "JX857304"
    ]
    #writing new file 
    with open("genbank_records_HOST_and_Lab_host.csv", "w", newline='') as csvfile:
        csv_writer = csv.writer(csvfile)
        # Write header
        csv_writer.writerow(["Accession", "Host", "Lab Host"])
        for accession_number in accession_numbers:
            record = fetch_genbank_record(accession_number)
            if record:
                accession = record.id
                # Extract host and lab host information
                host_info, lab_host_info = extract_host_info(record)
                # Write data to CSV
                csv_writer.writerow([accession, host_info, lab_host_info])

#the actual running of the script

if __name__ == "__main__":
    main()


`------------------------------``------------------------------``------------------------------``------------------------------``------------------------------``------------------------------``------------------------------``------------------------------`
#this is not what we wanted but will get genbank descriptions very easy to use
`------------------------------``------------------------------``------------------------------``------------------------------``------------------------------``------------------------------``------------------------------``------------------------------`



def main():
    # List of accession numbers
    accession_numbers = [
        "MH177014", "MN450761", "MN450762", "MN450763", "MH049431", "OL504742", "OL504743", 
        "OL504741", "KR028365", "KR028366", "KR028367", "KR028368", "KR028369", "KR028370", 
        "S79186", "OK274284", "OK274285", "OK274286", "OK274287", "OK274288", "OK274289", 
        "OK274291", "OK274290", "M13795", "KY398733", "KY398740", "AH002793", "M24205", 
        "AF551845", "AF551847", "EF645136", "KY849701", "KY849702", "KY849703", "KY849704", 
        "KY849705", "KY849706", "KY849707", "KY849708", "KY849709", "KY849710", "KY849711", 
        "KY849712", "KY849713", "KY849714", "KY849715", "KY849716", "KY849717", "KY849718", 
        "KY849719", "KY849720", "KY849721", "KY849722", "KY849723", "KY849724", "KY849725", 
        "KY849726", "KY849727", "KY849728", "KY849729", "KY849730", "KY849731", "KY849732", 
        "KY849733", "KY849734", "KY849735", "KY849736", "KY849737", "KY849738", "KY849739", 
        "KY849740", "KY849741", "KY849742", "KY849743", "KY849744", "KY849745", "KY849746", 
        "KY849747", "KY849748", "KY849749", "KY849750", "KY849751", "KY849752", "KY849753", 
        "KY849754", "KY849755", "KY849756", "KY849757", "KY849758", "KY849759", "KY849760", 
        "KY849761", "KY849762", "HQ620296", "HQ620297", "KX545421", "KF914669", "HQ395675", 
        "HQ395676", "HQ395683", "HQ596506", "HQ596516", "HQ596507", "HQ668020", "DQ263696", 
        "DQ263695", "DQ263697", "JQ341188", "JQ341189", "JQ341190", "MH719217", "MH523642", 
        "KC017951", "KC018037", "MG765427", "MG765426", "KX690530", "MN563088", "MN718829", 
        "MN718830", "MN718831", "MH426702", "MT732486", "MT732487", "MT732484", "MT732485", 
        "MT732488", "MT732490", "MT732491", "MT732489", "MH509394", "MH509393", "KF985175", 
        "JQ687377", "KC984305", "JX183260", "JX183268", "JX183275", "KX555601", "KX555602", 
        "MH631015", "MH631016", "KJ410048", "KM099432", "KT187552", "KR259656", "MH615810", 
        "CP099892", "CP099893", "CP099894", "CP099890", "CP099891", "CP099898", "CP099899", 
        "CP099900", "CP099901", "CP099902", "CP099910", "CP099911", "CP099895", "CP099896", 
        "CP099897", "KX771232", "MW013954", "EF545564", "EF545565", "OM858819", "ON075498", 
        "ON075499", "ON077631", "ON077632", "OM858820", "MW856793", "MW856794", "MZ433432", 
        "MT370517", "MT374107", "MT374115", "MT374116", "MT274668", "MT274669", "KU893863", 
        "KU893868", "KU893869", "MG999576", "MG999577", "MG999578", "MG999579", "MG999580", 
        "MG999581", "MG999582", "MG999583", "MG999584", "MG999585", "MN075149", "MN075150", 
        "KC859950", "KC859952", "KC859951", "MN723881", "MN723880", "MN723882", "MN723883", 
        "MN723884", "MN723885", "MN723886", "MN723887", "MN723888", "MN723889", "KJ746846", 
        "KJ746847", "KJ746854", "KJ746855", "KJ746858", "KJ746859", "KJ746860", "KJ746861", 
        "KF303100", "MT043279", "KP861859", "JX443620", "JX443622", "KC794529", "MH025971", 
        "MH025972", "MH025973", "MH108964", "MH108966", "KF032240", "KF149867", "KR091562", 
        "KF214764", "KX266912", "KX266913", "KX266915", "KF254761", "KF254763", "KR091564", 
        "KF280870", "KF280871", "KF280869", "KF311075", "KF311077", "KF311076", "KF359956", 
        "KF410620", "KF468719", "KF530028", "KX838946", "KF922360", "MH667273", "MH667288", 
        "MH667304", "KT001487", "KT001486", "KT001485", "KT001490", "KT001488", "KT001493", 
        "MK348888", "MK348896", "MK348897", "MK348901", "MK348898", "KJ888424", "KJ888425", 
        "KT161320", "KT161328", "KM099431", "KM099435", "KM099436", "KT161327", "KM283223", 
        "KR091554", "KR493426", "KP202689", "KP297806", "KP329571", "KP677286", "KR493425", 
        "KP704590", "KP704588", "KP704591", "KP704592", "KP728904", "KP728906", "KP728905", 
        "KP728903", "KP728907", "KP728910", "KP728913", "KP790246", "KP790248", "KP790247", 
        "KP938189", "KP938194", "KP938198", "KP938199", "KP938200", "JX051516", "KR493427", 
        "JX051517", "JX183261", "KR493428", "JX183263", "JX183262", "JX183269", "JX183267", 
        "JX183274", "KT428797", "KT428800", "KT428798", "KT428799", "KT428802", "KT428801", 
        "KT428803", "JX219961", "KR091555", "JX219965", "KR493429", "JX219960", "JX486009", 
        "JX631247", "MF449467", "KR091556", "KT818817", "KT818818", "KT818820", "KT818819", 
        "KT818825", "KT818824", "KT818826", "KT818827", "KT818828", "KR091558", "KU053773", 
        "KU053778", "KU053779", "KU053780", "KU053782", "KU053785", "KU053783", "KU053787", 
        "KU053789", "KU053791", "KU053793", "KU053794", "KU053792", "KU176117", "KU176124", 
        "KC139050", "KC139051", "KR091560", "KC708873", "KU746840", "KJ136549", "KJ136548", 
        "KJ136550", "KJ136551", "KJ136552", "KJ136553", "KJ136554", "KJ136557", "KJ136556", 
        "KJ136555", "KJ136558", "KJ136559", "KJ136560", "KJ136561", "JX183265", "JX266446", 
        "KJ755977", "KJ755979", "KJ755980", "KJ755981", "KJ755978", "KJ755982", "JX486006", 
        "JX857303", "JX857304"
    ]

    for accession_number in accession_numbers:
        record = fetch_genbank_record(accession_number)
        if record:
            print(f"GenBank Record for Accession Number {accession_number}:\n")
            print(f"Accession: {record.id}")
            print(f"Description: {record.description}")

            # Extract host information from the source feature
            for feature in record.features:
                if feature.type == "source" and "/host" in feature.qualifiers:
                    host_info = feature.qualifiers["/host"]
                    print(f"Host: {', '.join(host_info)}")

            print("\n" + "-"*50 + "\n")  # Separator between records

if __name__ == "__main__":
    main()